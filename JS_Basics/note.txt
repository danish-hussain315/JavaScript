data types keywords
  const
  let 
  var
  with any about three key words

"use Strict"; was used initial use to tell engine as newer version of the JS

JS is dynamically typed language 






//Type of vaiable Primitive and non Primitive 
most languages but names may vary).

ðŸ”¹ Primitive Data Types

Primitives are basic, immutable (cannot be changed directly) data types.
They are stored by value (a copy is created when assigned).



Non Primitive

Non-primitives are objects, which can hold multiple values.
They are stored by reference (when assigned, both variables point to the same object).

Example
let obj1 = { name: "Ali" };
let obj2 = obj1;   // both point to the SAME object in heap

obj2.name = "Danish";

console.log(obj1.name); // "Danish"




++++++++++++++++++++++++++++++++++ Video 10 ++++++++++++++++++++
Stack used by Primitive
Heap is Used of Non-Primitive






++++++++++++++++++++ Video 11 ++++++++++++++++++++++++++++++++++++

ðŸ”¹ What is String Interpolation?
String interpolation means embedding variables or expressions inside a string instead of concatenating with +.

In JavaScript, this is done with Template Literals (using backticks `).


*string comparision is case sensitive
*String Prototype will tell about the all funtion that can be apply on the String
* on apply of any funtion primitives never change the orignal variables




+++++++++++++++++++++++++++++ Video 12 +++++++++++++++++

Number and Math Libray


++++++++++++++++++++++++++ Video 13 Data and Time ++++++++++++++++++
*Date is Object 
*Date give by system is unreadable so we uses the method to make is understandable
*Months start from 0



+++++++++++++++ Video 14  Array +++++++++++++++++++++++++++++++
* Array Takes multiple values 
* Array can store different dataTypes at same Time (Hetrogene type)
* JS array is dynamic 
* Array created shallow copy (same refference) rather than the Deep copy()
* in Deep copy we are assured that we are not changing the other copy either orignal or copy
* In Shallow copy we are ensured that when I change single other will auto changed
* there are few methods that are called Questioneer they return true ow false
  includes()
* indexOf()  indexs -1 to till index
* join() convert array values to strings and remove square brackets
* slice and splice
 slice(startindex , endIndex)
 splice(start, deleteCount, [value to insert(optional)])
* slice endIndex is not Indcluded and 
  used the deep copy when data in Array is Primitive
  used the shallow copy when data in Array is Non-Primitive


âœ… Deep Copy

A deep copy creates a completely independent copy, including all nested objects/arrays.
Changing one does not affect the other.

âœ… Shallow Copy

A shallow copy only copies the first level of the object/array.

If the array/object contains primitives â†’ new values are created (safe).

If it contains objects/arrays inside â†’ only references (pointers) are copied, so nested data is shared between original and copy.





++++++++++++++++++++++ Video 15 Array Part 2 ++++++++++++++++++++++++
* arr.push(array)      //consider a array as the element
* arr.concate(array )  // make a large array
+ newArray = [...arr1 , ...arr2, n]           // make a large array
* newArray.flat(level)  //reduced the level og nested arrays
* isArray(arrya)
*Array.from()     // From Converts the string to the character Array
*Array.from({name = "Danish"})        // It will return empty object
* Array.of(variables)         // creates array from variable






+++++++++++++++++ video 16 Object First Part +++++++++++++
Object types
  1 Singleton Object   Object.create("my_Object")
  2 Literals Object            my_Object = {}

  Aceesing Object dotNotation and Square brackets
  Using Symbol as property of the object used square brackets
funtion reference (greeting)
funtion execution (greeting())


+++++++++++++++++++ Video 17 Object part 2 ++++++++++++
* Previous Video was about the Literal Object
* It Singleton Object
   Object that can be created by constructor or Object help

assign() is used to merge objects





+++++++++++++++++++ video 18 Object Part 3 De Structuring JSON Intro +++++++++++++++++
Object de-Structure 
API => your work on other
All Apis are in form of JSON 
* Random Api used to take few Api
* API Formattor used to post Martum of API

++++++++++++++++++ video 19 Functions and Parameter +++++++++++++++
* 


+++++++++++++++++++video 20 Funtions with Objects and Arrays +++++++++++++++
Rest Operator




++++++++++++++++++++++ Video 21 Functions Global and Local Scope ++++++++++++++
Global scope in node and console is different
* window.a ,window.z
* Global.a , Global.z



+++++++++++++++++++  Video 22 This and Arrow Function in JavaScript ++++++++++++++
* this reference to the current context
* this give in node at Global scope empty object  { } and in browser gives window, Global etc
  when we are in Node Environment
  * Just console.log(this) gives the empty object
  * in Function console.log(this)  gives lot of object that are running in node Environment
    but in arrow function this will give empty Object bC this global object
Arrow Function
* Explicit arrow Function must use of return statement and curly brackets
* rest function will called Implicit arrow Function

// Explicit Arrow Function must uses the {} and return statement
let add = (num1 , num2) => {          
  return  num1 +num2
}

console.log(add(4,14));

//Implicit Arrow Function most used in React 
let sub = (a , b) => a -b
console.log(sub(24 ,4));

// this santax is also used to return Object and arrays
let sub2Implicit = (a ,b) => (a-b)         
console.log(sub2Implicit(28 ,4));



+++++++++++++++++++++++ video 23 Hoisting and Scope in Function ++++++++++++++++++
// Hoisting demo with function delceration Normal Funtion with Expression

console.log(addOne(5));

function addOne(num){      // Normal Function can be easily call
  return num +1
}                            //output = 6

console.log(addTwo(6));
let addTwo = function(num){     // expersion funtion can not call before decleration
  return num +2
}                               // this will give error before decleration function called
var a= 10
console.log(a);    



++++++++++++++++++ video 24 IIFE +++++++++++++
* funtion that called imdiately due to avoid global pollution
* once IIFE start it never know where to stop so ";" is mandatory to stop it
* if you write two iife at once then don't miss ; 
(function  newFunction(){                    // IIFE in Normal function
  console.log("IIFE");                        // also called named IIFE
  
})();

(() => {                                        //IIFE with the arrow function 
  console.log("From Arrow function")
})();


((valuess) => {                                 // passing the values to the arrow function IIFE
  console.log("From Arrow function" , valuess)
})("Danish")







++++++++++++++++++++ video 25 Code execution and Call Stack ++++++++++++++++++++++++++
JavaScript execution Context
  * How JS run your file there are two phases
  1 GEC Global execution Context 
  2 FEC Functional exection context
  3 Eval exection Context

+++++++++++++++++ Video 26 Control Structure ++++++++++++++++++++
switch statement
truthy and False 
  * Falsy           // assumed as false
  false , 0, -0 , 0n of bigInt, "", NaN, null , undefined
  * truthy
  true , '0', 'false' , [] , {}, function(){} , 


+++++++++++++++++ Truth and Falsy Values +++++++++++++++++++++++++
Nullish coalescing opererotr (??) null undefined      // it work on null and undefined during value assign
let val = 2 ?? 4
let val1 = null ?? 4
let val2 = undefined ?? null
console.log(val);
console.log(val1);
console.log(val2);

            +++++++++++ Ternaary Operator +++++
condition ? whenture :  whenFalse



++++++++++++++++++ Video 27 While and do While +++++++++++++++++++++++++++++
while loop
do while Loop    // atleast oneTime run



++++++++++++++++++ Video 29 HOF +++++++++++++++++
* Higher Order Function
Foreach  // is just for iteration don't rerurn any thing


++++++++++ Higher order array loops +++++++
* for of loog can be instead of for loop






































































NOtes
// Function Expression is when you use the variable which has assigned a function